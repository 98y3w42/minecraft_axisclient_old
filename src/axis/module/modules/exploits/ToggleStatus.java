package axis.module.modules.exploits;

import org.lwjgl.opengl.GL11;

import axis.event.Event;
import axis.event.EventTarget;
import axis.event.events.DrawScreenEvent;
import axis.event.events.KeyboardEvent;
import axis.event.events.UpdateEvent;
import axis.management.managers.ModuleManager.Category;
import axis.module.Module;
import net.minecraft.block.material.Material;
import net.minecraft.client.gui.ScaledResolution;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.item.ItemStack;

public class ToggleStatus extends Module {

	public boolean Sprint = false;
	public boolean Sneak = false;
	private boolean sneakkyeheld = false;
	private int sneaking = 0;
	private boolean sprintkyeheld = false;
	private int sprinting = 0;

	public ToggleStatus() {
	      super("ToggleStatus", 0x00BFFF, Category.EXPLOITS);
	}

	@EventTarget
	public void onKeyboard(KeyboardEvent event) {
        if (mc.gameSettings.keyBindSprint.getKeyCode() == event.key){
        	Sprint = !Sprint;
        }

        if (mc.gameSettings.keyBindSneak.getKeyCode() == event.key) {
        	Sneak = !Sneak;
        }
    }

	@EventTarget
	public void onUpdate(UpdateEvent event) {
		if (event.state == Event.State.PRE) {
			if (Sprint && canSprint() && !Sneak && !mc.thePlayer.isUsingItem()) {
				mc.thePlayer.setSprinting(true);
			}

			if (Sneak && canSneak()) {
				mc.thePlayer.setSneaking(true);
			}
		}
	}


	private void drawArmorStatus(ScaledResolution scaledRes) {
	      if(mc.playerController.isNotCreative()) {
	         int x = 15;
	         GL11.glPushMatrix();

	         for(int index = 3; index >= 0; --index) {
	            ItemStack stack = mc.thePlayer.inventory.armorInventory[index];
	            if(stack != null) {
	               mc.getRenderItem().renderItemIntoGUI(stack, scaledRes.getScaledWidth() / 2 + x - 1, scaledRes.getScaledHeight() - (mc.thePlayer.isInsideOfMaterial(Material.water)?65:55) - 1);
	               mc.getRenderItem().renderItemOverlays(mc.fontRendererObj, stack, scaledRes.getScaledWidth() / 2 + x - 1, scaledRes.getScaledHeight() - (mc.thePlayer.isInsideOfMaterial(Material.water)?65:55) + 1);
	               x += 18;
	            }
	         }

	         GlStateManager.disableCull();
	         GlStateManager.enableAlpha();
	         GlStateManager.disableBlend();
	         GlStateManager.disableLighting();
	         GlStateManager.disableCull();
	         GlStateManager.clear(256);
	         GL11.glPopMatrix();
	      }

	   }

	public boolean canSprint() {
		if (mc.thePlayer.getFoodStats().getFoodLevel() > 5 && !mc.gameSettings.keyBindSneak.pressed && (mc.gameSettings.keyBindForward.pressed || mc.gameSettings.keyBindLeft.pressed || mc.gameSettings.keyBindRight.pressed || mc.gameSettings.keyBindBack.pressed)) {
			return true;
		}
		return false;
	}

	public boolean canSneak () {
		if (!mc.thePlayer.isRiding()) {
			return true;
		}
		return false;
	}

	public void onDisabled()
	{
		super.onDisabled();
		Sneak = false;
		Sprint = false;
	}

	public void onEnabled()
	{
		super.onEnabled();
	}

}
