package axis.module.modules.exploits;

import java.util.List;

import axis.Axis;
import axis.command.Command;
import axis.event.Event;
import axis.event.events.Render3DEvent;
import axis.event.events.TickEvent;
import axis.event.events.UpdateEvent;
import axis.management.managers.ModuleManager.Category;
import axis.module.Module;
import axis.module.modules.render.HUD;
import axis.util.BlockHelper;
import axis.util.Camera;
import axis.util.Logger;
import axis.util.RenderLatest;
import axis.util.RenderUtils;
import axis.util.Stencil;
import axis.util.TimeHelper;
import net.minecraft.block.Block;
import net.minecraft.block.BlockAir;
import net.minecraft.block.BlockHopper;
import net.minecraft.block.state.IBlockState;
import net.minecraft.client.Minecraft;
import net.minecraft.client.multiplayer.WorldClient;
import net.minecraft.entity.player.InventoryPlayer;
import net.minecraft.item.ItemBow;
import net.minecraft.item.ItemBucketMilk;
import net.minecraft.item.ItemFood;
import net.minecraft.item.ItemPotion;
import net.minecraft.item.ItemStack;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement;
import net.minecraft.network.play.client.C09PacketHeldItemChange;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.util.BlockPos;
import net.minecraft.util.FoodStats;
import net.minecraft.util.MathHelper;

public class GodMode extends Module {

	private boolean regen;
	private boolean potion;

	public GodMode() {
		super("GodMode", 9623002, Category.EXPLOITS);
	}

	private void onUpdate(UpdateEvent event) {
		if ((event.state == Event.State.POST) && (mc.thePlayer.getHealth() < 9.5D * 2.0D)
				&& (mc.thePlayer.isCollidedVertically)) {
			for (int i = 0; i < 1560.0D; i++) {
				mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer(true));
			}
		}
		if (event.state == Event.State.PRE) {
			int foodSlot = getFoodSlotInHotbar();
			if ((foodSlot != -1) && (mc.thePlayer.getFoodStats().getFoodLevel() < 9.5D * 2.0D)
					&& (mc.thePlayer.isCollidedVertically) && (mc.thePlayer.onGround)) {
				mc.thePlayer.sendQueue.addToSendQueue(new C09PacketHeldItemChange(foodSlot));
				mc.thePlayer.sendQueue.addToSendQueue(
						new C08PacketPlayerBlockPlacement(mc.thePlayer.inventory.mainInventory[foodSlot]));
				for (int i = 0; i < 32; i++) {
					mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer(false));
				}
				mc.thePlayer.stopUsingItem();
				mc.thePlayer.sendQueue.addToSendQueue(new C09PacketHeldItemChange(mc.thePlayer.inventory.currentItem));
			}
		}
	}

	private boolean isInsideBlock() {
		for (int x = MathHelper.floor_double(mc.thePlayer.boundingBox.minX); x < MathHelper
				.floor_double(mc.thePlayer.boundingBox.maxX) + 1; x++) {
			for (int y = MathHelper.floor_double(mc.thePlayer.boundingBox.minY); y < MathHelper
					.floor_double(mc.thePlayer.boundingBox.maxY) + 1; y++) {
				for (int z = MathHelper.floor_double(mc.thePlayer.boundingBox.minZ); z < MathHelper
						.floor_double(mc.thePlayer.boundingBox.maxZ) + 1; z++) {
					Block block = mc.theWorld.getBlockState(new BlockPos(x, y, z)).getBlock();
					if ((block != null) && (!(block instanceof BlockAir))) {
						AxisAlignedBB boundingBox = block.getCollisionBoundingBox(mc.theWorld, new BlockPos(x, y, z),
								mc.theWorld.getBlockState(new BlockPos(x, y, z)));
						if ((block instanceof BlockHopper)) {
							boundingBox = new AxisAlignedBB(x, y, z, x + 1, y + 1, z + 1);
						}
						if ((boundingBox != null) && (mc.thePlayer.boundingBox.intersectsWith(boundingBox))) {
							return true;
						}
					}
				}
			}
		}
		return false;
	}

	private int getFoodSlotInHotbar() {
		for (int i = 0; i < 9; i++) {
			if ((mc.thePlayer.inventory.mainInventory[i] != null)
					&& (mc.thePlayer.inventory.mainInventory[i].getItem() != null)
					&& ((mc.thePlayer.inventory.mainInventory[i].getItem() instanceof ItemFood))) {
				return i;
			}
		}
		return -1;
	}

	public void onUpdate2(UpdateEvent event) {
		if (((!this.regen) || (mc.thePlayer.onGround)) && (mc.thePlayer.getItemInUseDuration() == 0)
				&& (!(mc.thePlayer.getItemInUse().getItem() instanceof ItemBow))) {
			for (int i = 0; i < (this.regen ? 500 : 25); i++) {
				mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer(true));
			}
		}
	}

	public boolean isUsable(ItemStack stack) {
		if (stack == null) {
			return false;
		}
		if (mc.thePlayer.isUsingItem()) {
			if ((stack.getItem() instanceof ItemFood)) {
				return true;
			}
			if ((stack.getItem() instanceof ItemPotion)) {
				return true;
			}
			if ((stack.getItem() instanceof ItemBucketMilk)) {
				return true;
			}
		}
		return false;
	}
}
