package axis.module.modules.exploits;

import java.util.Iterator;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

import org.lwjgl.opengl.EXTFramebufferObject;
import org.lwjgl.opengl.GL11;

import axis.Axis;
import axis.command.Command;
import axis.event.Event.State;
import axis.event.events.Render3DEvent;
import axis.event.events.UpdateEvent;
import axis.management.managers.ModuleManager.Category;
import axis.module.Module;
import axis.module.modules.render.HUD;
import axis.util.BlockHelper;
import axis.util.Camera;
import axis.util.Logger;
import axis.util.RenderLatest;
import axis.util.RenderUtils;
import axis.util.Stencil;
import axis.util.TimeHelper;
import net.minecraft.block.Block;
import net.minecraft.block.BlockAir;
import net.minecraft.block.BlockBed;
import net.minecraft.block.BlockBrewingStand;
import net.minecraft.block.BlockChest;
import net.minecraft.block.BlockDragonEgg;
import net.minecraft.block.BlockOre;
import net.minecraft.init.Blocks;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.tileentity.TileEntityBrewingStand;
import net.minecraft.tileentity.TileEntityChest;
import net.minecraft.tileentity.TileEntityDispenser;
import net.minecraft.tileentity.TileEntityDropper;
import net.minecraft.tileentity.TileEntityEnderChest;
import net.minecraft.tileentity.TileEntityFurnace;
import net.minecraft.tileentity.TileEntityHopper;
import net.minecraft.tileentity.TileEntityMobSpawner;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.inventory.GuiContainer;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.OpenGlHelper;
import net.minecraft.client.renderer.RenderGlobal;
import net.minecraft.client.renderer.culling.Frustum;
import net.minecraft.client.renderer.entity.RenderManager;
import net.minecraft.client.shader.Framebuffer;
import net.minecraft.init.Blocks;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.MathHelper;
import net.minecraft.util.Vec3;

public class BedFucker extends Module{

	public static final List<BlockPos> openedBlocks = new CopyOnWriteArrayList();
	private final TimeHelper time = new TimeHelper();
	private boolean shouldBreak = false;
	BlockPos globalPos;

	public BedFucker() {
		super("BedFucker", 0x00FF00, Category.EXPLOITS);
	}

	public void onUpdate (UpdateEvent event) {
		if (event.state == State.PRE) {
			int radius = 7;
			for (int y = radius; y >= -radius; y--) {
				for (int x = -radius; x <= radius; x++) {
					for (int z = -radius; z <= radius; z++)
					{
						BlockPos pos = new BlockPos(mc.thePlayer.posX - 0.5D + x,
								mc.thePlayer.posY - 0.5D + y,
								mc.thePlayer.posZ - 0.5D + z);
						Block block = Minecraft.getMinecraft().theWorld.getBlockState(pos).getBlock();
						Double distance = (double) MathHelper.sqrt_double(mc.thePlayer.getDistanceSq(pos));
						if ((getFacingDirection(pos) != null) && (pos != null)) {
							if (((mc.thePlayer.getDistance(mc.thePlayer.posX + x, mc.thePlayer.posY + y, mc.thePlayer.posZ + z) < mc.playerController.getBlockReachDistance() - 0.5D) && (block instanceof BlockBed) || (block instanceof BlockDragonEgg)&& (distance < 6.5D))) {
								this.shouldBreak = true;
								float[] rotations = BlockHelper.getBlockRotations(pos.getX(), pos.getY(), pos.getZ());
								event.yaw = rotations[0];
								event.pitch = rotations[1];
								this.globalPos = pos;
								return;
							}
						}
					}
				}
			}
		}

		if (event.state == State.POST) {
			Double distance = (double) MathHelper.sqrt_double(mc.thePlayer.getDistanceSq(this.globalPos));
			if ((this.globalPos != null) && (!openedBlocks.contains(this.globalPos)) &&  (this.shouldBreak) && (distance < 6.5D)) {
				//mc.thePlayer.swingItem();
				if (mc.playerController.blockHitDelay > 1) {
					mc.playerController.blockHitDelay = 1;
				}
				Block block = Minecraft.getMinecraft().theWorld.getBlockState(globalPos).getBlock();
				if (!((block instanceof BlockBrewingStand) || (block instanceof BlockOre) || (block instanceof BlockBed) || (block instanceof BlockDragonEgg)&& (distance < 6.5D))) {
					return;
				}
				EnumFacing direction = getFacingDirection(this.globalPos);
				if (direction != null){
				    mc.playerController.onPlayerDamageBlock(this.globalPos, EnumFacing.UP);
				}
			}
		}
	}

	public void onDisabled() {
		super.onDisabled();
		if (mc.theWorld != null) {
			openedBlocks.clear();
		}
	}

	private EnumFacing getFacingDirection(BlockPos pos) {
		EnumFacing direction = null;
		if (!mc.theWorld.getBlockState(pos.add(0, 1, 0)).getBlock().isSolidFullCube()) {
			direction = EnumFacing.UP;
		} else if (!mc.theWorld.getBlockState(pos.add(0, -1, 0)).getBlock().isSolidFullCube()) {
			direction = EnumFacing.DOWN;
		} else if (!mc.theWorld.getBlockState(pos.add(1, 0, 0)).getBlock().isSolidFullCube()) {
			direction = EnumFacing.EAST;
		} else if (!mc.theWorld.getBlockState(pos.add(-1, 0, 0)).getBlock().isSolidFullCube()) {
			direction = EnumFacing.WEST;
		} else if (!mc.theWorld.getBlockState(pos.add(0, 0, 1)).getBlock().isSolidFullCube()) {
			direction = EnumFacing.SOUTH;
		} else if (!mc.theWorld.getBlockState(pos.add(0, 0, 1)).getBlock().isSolidFullCube()) {
			direction = EnumFacing.NORTH;
		}
		return direction;
	}
	public void onRender(Render3DEvent event) {
		checkSetupFBO();
		onRenderBlockOutline(event.getPartialTicks());
	}

	public void onRenderBlockOutline(float partialTicks) {
		Double distance = (double) MathHelper.sqrt_double(mc.thePlayer.getDistanceSq(this.globalPos));
		if ((globalPos != null) && (distance < 6.5D)) {
			GL11.glDisable(2896);
			GL11.glDisable(3553);
			GL11.glEnable(3042);
			GL11.glBlendFunc(770, 771);
			GL11.glDisable(2929);
			GL11.glEnable(2848);
			GL11.glDepthMask(false);
			GL11.glLineWidth(0.3F);
			if (this.globalPos != null && distance > 6.7D) {
				GL11.glColor4f(1.0F, 0.2F, 0.0F, 0.25F);
			} else if (mc.theWorld.getBlockState(this.globalPos).getBlock() instanceof BlockAir) {
				GL11.glColor4f(1.0F, 0.7F, 0.0F, 0.25F);
			} else {
				GL11.glColor4f(0.2F, 0.9F, 0.0F, 0.25F);
			}
			double x = this.globalPos.getX() - mc.getRenderManager().viewerPosX;
			double y = this.globalPos.getY() - mc.getRenderManager().viewerPosY;
			double z = this.globalPos.getZ() - mc.getRenderManager().viewerPosZ;
			AxisAlignedBB box = new AxisAlignedBB(x, y, z, x + 1.0D, y + 1.0D, z + 1.0D);
			RenderUtils.drawFilledBox(box);
			if (this.globalPos != null && distance > 6.7D) {
				GL11.glColor4f(1.0F, 0.2F, 0.0F, 0.4F);
			} else if (mc.theWorld.getBlockState(this.globalPos).getBlock() instanceof BlockAir) {
				GL11.glColor4f(1.0F, 0.7F, 0.0F, 0.4F);
			} else {
				GL11.glColor4f(0.2F, 0.9F, 0.0F, 0.4F);
			}
		    RenderGlobal.func_181561_a(box);
			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
			GL11.glDepthMask(true);
			GL11.glDisable(2848);
			GL11.glEnable(2929);
			GL11.glDisable(3042);
			GL11.glEnable(2896);
			GL11.glEnable(3553);
		}
	}

		  public static void checkSetupFBO()
		  {
		    Framebuffer fbo = Minecraft.getMinecraft().getFramebuffer();
		    if (fbo != null) {
		      if (fbo.depthBuffer > -1)
		      {
		        setupFBO(fbo);

		        fbo.depthBuffer = -1;
		      }
		    }
		  }

		  public static void setupFBO(Framebuffer fbo)
		  {
		    EXTFramebufferObject.glDeleteRenderbuffersEXT(fbo.depthBuffer);

		    int stencil_depth_buffer_ID = EXTFramebufferObject.glGenRenderbuffersEXT();

		    EXTFramebufferObject.glBindRenderbufferEXT(36161, stencil_depth_buffer_ID);

		    EXTFramebufferObject.glRenderbufferStorageEXT(36161, 34041, Minecraft.getMinecraft().displayWidth, Minecraft.getMinecraft().displayHeight);

		    EXTFramebufferObject.glFramebufferRenderbufferEXT(36160, 36128, 36161, stencil_depth_buffer_ID);

		    EXTFramebufferObject.glFramebufferRenderbufferEXT(36160, 36096, 36161, stencil_depth_buffer_ID);
		  }

}
