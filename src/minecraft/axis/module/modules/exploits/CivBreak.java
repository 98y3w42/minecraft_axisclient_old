package axis.module.modules.exploits;

import org.lwjgl.opengl.EXTFramebufferObject;
import org.lwjgl.opengl.GL11;

import axis.Axis;
import axis.command.Command;
import axis.event.Event.State;
import axis.event.events.BlockBreakingEvent;
import axis.event.events.PacketSentEvent;
import axis.event.events.Render3DEvent;
import axis.event.events.UpdateEvent;
import axis.management.managers.ModuleManager;
import axis.module.Module;
import axis.util.BlockHelper;
import axis.util.Camera;
import axis.util.Logger;
import axis.util.RenderLatest;
import axis.util.RenderUtils;
import axis.util.Stencil;
import axis.util.TimeHelper;
import axis.value.Value;
import net.minecraft.block.BlockAir;
import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.RenderGlobal;
import net.minecraft.client.renderer.culling.Frustum;
import net.minecraft.client.renderer.entity.RenderManager;
import net.minecraft.client.shader.Framebuffer;
import net.minecraft.item.ItemBlock;
import net.minecraft.network.play.client.C07PacketPlayerDigging;
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement;
import net.minecraft.network.play.client.C0APacketAnimation;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.MathHelper;

public class CivBreak extends Module {

	private EnumFacing side;
	private TimeHelper time = new TimeHelper();
	public final Value<Double> range = new Value<>("civbreak_range", 4.8D);
	public final Value<Long> speed = new Value<>("civbreak_speed", 1L);
	private final Value<String> currentMode = new Value("civbreak_mode", "Virus");
	private C07PacketPlayerDigging packet;
	private BlockPos pos;
	private boolean sendClick = false;

	public CivBreak() {
		super("CivBreak", -6165654, ModuleManager.Category.EXPLOITS);
		setTag(currentMode.getValue());
		Axis.getCommandManager().getContents()
				.add(new Command("civbreak", "<mode>", new String[] { "civmode", "cvm" }) {
					public void run(String message) {
						if (message.split(" ")[1].equalsIgnoreCase("mode")) {
							if (message.split(" ")[2].equalsIgnoreCase("Noxious")) {
								currentMode.setValue("Noxious");
							} else if (message.split(" ")[2].equalsIgnoreCase("Virus")) {
								currentMode.setValue("Virus");
							} else if (message.split(" ")[2].equalsIgnoreCase("Hex")) {
								currentMode.setValue("Hex");
							}
							Logger.logChat("CivBreak Mode is " + currentMode.getValue());
							setTag(currentMode.getValue());
						}
					}
				});
		Axis.getCommandManager().getContents()
				.add(new Command("civbreakspeed", "<speed>", new String[] { "civspeed", "cvs" }) {
					public void run(String message) {
						if (message.split(" ")[1].equalsIgnoreCase("-d")) {
							CivBreak.this.speed.setValue((Long) CivBreak.this.speed.getDefaultValue());
						} else {
							CivBreak.this.speed.setValue(Long.valueOf(Long.parseLong(message.split(" ")[1])));
						}

						if (((Long) CivBreak.this.speed.getValue()).intValue() > 1000) {
							CivBreak.this.speed.setValue(Long.valueOf(1000));
						} else if (((Long) CivBreak.this.speed.getValue()).intValue() < 1) {
							CivBreak.this.speed.setValue(Long.valueOf(1));
						}

						Logger.logChat("CivBreak Speed set to: " + CivBreak.this.speed.getValue());
					}
				});
		Axis.getCommandManager().getContents()
				.add(new Command("civbreakradius", "<range>", new String[] { "civradius", "cvr" }) {
					public void run(String message) {
						if (message.split(" ")[1].equalsIgnoreCase("-d")) {
							CivBreak.this.range.setValue((Double) CivBreak.this.range.getDefaultValue());
						} else {
							CivBreak.this.range.setValue(Double.valueOf(Integer.parseInt(message.split(" ")[1])));
						}

						if (((Double) CivBreak.this.range.getValue()).intValue() > 6) {
							CivBreak.this.range.setValue(Double.valueOf(6));
						} else if (((Double) CivBreak.this.range.getValue()).doubleValue() < 1) {
							CivBreak.this.range.setValue(Double.valueOf(1));
						}

						Logger.logChat("CivBreak Range set to: " + CivBreak.this.range.getValue());
					}
				});
	}

	public void onEvent(UpdateEvent event) {
		if (currentMode.getValue().equals("Noxious")) {
			if (event.state == State.PRE) {
				if (this.pos != null && mc.thePlayer.getDistanceSq(this.pos) < 22.399999618530273D) {
					float[] rotations = BlockHelper.getBlockRotations(this.pos.getX(), this.pos.getY(),
							this.pos.getZ());
					event.yaw = rotations[0];
					event.pitch = rotations[1];
					for (int i = 0; i < 10; i++) {
						if (this.pos != null && mc.thePlayer.getDistanceSq(this.pos) < 22.399999618530273D) {
							mc.thePlayer.swingItem();
							mc.playerController.onPlayerDamageBlock(this.pos, this.side);
							if (mc.playerController.blockHitDelay > 0) {
								mc.playerController.blockHitDelay = 0;
							}
							mc.getNetHandler().addToSendQueue(new C0APacketAnimation());
							mc.getNetHandler().addToSendQueue(new C07PacketPlayerDigging(
									C07PacketPlayerDigging.Action.START_DESTROY_BLOCK, this.pos, this.side));
							if ((mc.thePlayer.getHeldItem() != null)
									&& (!(mc.thePlayer.getHeldItem().getItem() instanceof ItemBlock))) {
								mc.getNetHandler().addToSendQueue(new C08PacketPlayerBlockPlacement(this.pos, -1,
										mc.thePlayer.getCurrentEquippedItem(), 0.0F, 0.0F, 0.0F));
							}
						}
					}
				}
			}
		}
	}

	public void onBreakPacketSent(PacketSentEvent event) {
		if (!(currentMode.getValue().equals("Noxious"))) {
			if (event.getPacket() instanceof C07PacketPlayerDigging) {
				if (((C07PacketPlayerDigging) event.getPacket())
						.getStatus() == C07PacketPlayerDigging.Action.STOP_DESTROY_BLOCK) {
					this.packet = ((C07PacketPlayerDigging) event.getPacket());
				}
			}
		}
	}

	public void onDigging(BlockBreakingEvent event) {
		if (event.getState() == BlockBreakingEvent.EnumBlock.CLICK && !this.sendClick) {
			this.pos = event.getPos();
		}
	}

	public void onUpdate(UpdateEvent event) {
		if (!(currentMode.getValue().equals("Noxious"))) {
			Double distance = (double) MathHelper.sqrt_double(mc.thePlayer.getDistanceSq(this.pos));
			if (distance > range.getValue()) {
				if (packet != null) {
					this.packet = null;
					mc.thePlayer.sendQueue.addToSendQueue(new C07PacketPlayerDigging(
							C07PacketPlayerDigging.Action.RELEASE_USE_ITEM, new BlockPos(0, 0, 0), EnumFacing.UP));
				}
				return;
			}
			if (event.state == event.state.PRE) {
				if (this.pos != null) {
					float[] rotations = BlockHelper.getBlockRotations((double) this.pos.getX(),
							(double) this.pos.getY(), (double) this.pos.getZ());
					event.yaw = rotations[0];
					event.pitch = rotations[1];
				}
			}

			if (event.state == event.state.POST) {
				if (this.pos != null && packet != null && this.pos.toString().equals(packet.getPosition().toString())) {
					if (time.hasReached(this.speed.getValue())) {
						this.mc.thePlayer.sendQueue.addToSendQueue(new C0APacketAnimation());
						this.mc.thePlayer.sendQueue.addToSendQueue(new C07PacketPlayerDigging(
								C07PacketPlayerDigging.Action.STOP_DESTROY_BLOCK, this.pos, EnumFacing.UP));
						// mc.thePlayer.swingItem();
						time.reset();
					}
				} else {
					this.packet = null;
				}

				if (packet == null) {
					this.sendClick = true;
					mc.playerController.onPlayerDamageBlock(this.pos, EnumFacing.UP);
					mc.thePlayer.swingItem();
					this.sendClick = false;
					time.reset();
				}
				if (currentMode.getValue().equals("Hex")) {
					if (!(mc.thePlayer.getHeldItem().getItem() instanceof ItemBlock)
							&& mc.thePlayer.getHeldItem().getMaxItemUseDuration() == 0) {
						mc.getNetHandler().addToSendQueue(new C08PacketPlayerBlockPlacement(this.pos, -1,
								mc.thePlayer.getCurrentEquippedItem(), 0.0F, 0.0F, 0.0F));
						mc.thePlayer.sendQueue.addToSendQueue(new C07PacketPlayerDigging(
								C07PacketPlayerDigging.Action.RELEASE_USE_ITEM, new BlockPos(0, 0, 0), EnumFacing.UP));
					}
				}
			}
		}
	}

	public void onDisabled() {
		super.onDisabled();
		pos = null;
	}

	public void onRender(Render3DEvent event) {
		checkSetupFBO();
		onRenderBlockOutline(event.getPartialTicks());
	}

	public void onRenderBlockOutline(float partialTicks) {
		if (pos != null) {
			GL11.glDisable(2896);
			GL11.glDisable(3553);
			GL11.glEnable(3042);
			GL11.glBlendFunc(770, 771);
			GL11.glDisable(2929);
			GL11.glEnable(2848);
			GL11.glDepthMask(false);
			GL11.glLineWidth(0.3F);
			Double distance = (double) MathHelper.sqrt_double(mc.thePlayer.getDistanceSq(this.pos));
			if (this.pos != null && distance > 6.7D) {
				GL11.glColor4f(1.0F, 0.2F, 0.0F, 0.25F);
			} else if (mc.theWorld.getBlockState(this.pos).getBlock() instanceof BlockAir) {
				GL11.glColor4f(1.0F, 0.7F, 0.0F, 0.25F);
			} else {
				GL11.glColor4f(0.2F, 0.9F, 0.0F, 0.25F);
			}
			double x = this.pos.getX() - mc.getRenderManager().viewerPosX;
			double y = this.pos.getY() - mc.getRenderManager().viewerPosY;
			double z = this.pos.getZ() - mc.getRenderManager().viewerPosZ;
			AxisAlignedBB box = new AxisAlignedBB(x, y, z, x + 1.0D, y + 1.0D, z + 1.0D);
			RenderUtils.drawFilledBox(box);
			if (this.pos != null && distance > 6.7D) {
				GL11.glColor4f(1.0F, 0.2F, 0.0F, 0.4F);
			} else if (mc.theWorld.getBlockState(this.pos).getBlock() instanceof BlockAir) {
				GL11.glColor4f(1.0F, 0.7F, 0.0F, 0.4F);
			} else {
				GL11.glColor4f(0.2F, 0.9F, 0.0F, 0.4F);
			}
			RenderGlobal.func_181561_a(box);
			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
			GL11.glDepthMask(true);
			GL11.glDisable(2848);
			GL11.glEnable(2929);
			GL11.glDisable(3042);
			GL11.glEnable(2896);
			GL11.glEnable(3553);
		}
	}

	public static void checkSetupFBO() {
		Framebuffer fbo = Minecraft.getMinecraft().getFramebuffer();
		if (fbo != null) {
			if (fbo.depthBuffer > -1) {
				setupFBO(fbo);

				fbo.depthBuffer = -1;
			}
		}
	}

	public static void setupFBO(Framebuffer fbo) {
		EXTFramebufferObject.glDeleteRenderbuffersEXT(fbo.depthBuffer);

		int stencil_depth_buffer_ID = EXTFramebufferObject.glGenRenderbuffersEXT();

		EXTFramebufferObject.glBindRenderbufferEXT(36161, stencil_depth_buffer_ID);

		EXTFramebufferObject.glRenderbufferStorageEXT(36161, 34041, Minecraft.getMinecraft().displayWidth,
				Minecraft.getMinecraft().displayHeight);

		EXTFramebufferObject.glFramebufferRenderbufferEXT(36160, 36128, 36161, stencil_depth_buffer_ID);

		EXTFramebufferObject.glFramebufferRenderbufferEXT(36160, 36096, 36161, stencil_depth_buffer_ID);
	}

}